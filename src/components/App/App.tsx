import React, { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { searchMovies } from "../../services/movieService";
import SearchBar from "../SearchBar/SearchBar";
import ErrorMessage from "../ErrorMessage/ErrorMessage";
import ReactPaginate from "react-paginate";
import MovieGrid from "../MovieGrid/MovieGrid";
import Loader from "../Loader/Loader";
import MovieModal from "../MovieModal/MovieModal";
import { Toaster, toast } from "react-hot-toast";
import css from "./App.module.css";
import type { Movie } from "../../types/movie";
import type { MovieResponse } from "../../types/movieResponse";

const App: React.FC = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [page, setPage] = useState(1);
  const [selectedMovie, setSelectedMovie] = useState<Movie | null>(null);

  const { data, isLoading, isError, isSuccess } = useQuery<MovieResponse>({
    queryKey: ["movies", searchTerm, page],
    queryFn: () => searchMovies(searchTerm, page),
    enabled: !!searchTerm,
    placeholderData: (previousData) => previousData,
  });

  // ‚úÖ –ü–æ–∫–∞–∑–∞—Ç–∏ toast –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–æ—Ä–æ–∂–Ω—å–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ
  useEffect(() => {
    if (isSuccess && data?.results.length === 0) {
      toast.error("No movies found");
    }
  }, [isSuccess, data]);

  return (
    <div>
      {/* üîî Toast */}
      <Toaster position="top-right" />

      {/* üîù –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å */}
      <div className={css.topBar}>
        <p>Powered by TMDB</p>
        <SearchBar
          action={(formData) => {
            const term = formData.get("query")?.toString().trim();

            if (!term) {
              toast.error("Please enter a search query");
              return;
            }

            setSearchTerm(term);
            setPage(1);
          }}
        />
      </div>

      {/* üßº –ü–æ—Ä–æ–∂–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ—à—É–∫–æ–º */}
      {!searchTerm && (
        <div className={css.blank}>
          <p>Start by searching for a movie.</p>
        </div>
      )}

      {/* ‚ö†Ô∏è –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ */}
      {isError && <ErrorMessage message="Something went wrong." />}

      {/* ‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è */}
      {isLoading && <Loader />}

      {/* ‚ùå –ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ */}
      {isSuccess && data?.results.length === 0 && (
        <ErrorMessage message="No movies found for your request." />
      )}

      {/* üî¢ –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è –∑–≤–µ—Ä—Ö—É */}
      {isSuccess && data.total_pages > 1 && (
        <ReactPaginate
          pageCount={data.total_pages}
          pageRangeDisplayed={5}
          marginPagesDisplayed={1}
          onPageChange={({ selected }) => setPage(selected + 1)}
          forcePage={page - 1}
          containerClassName={css.pagination}
          activeClassName={css.active}
          nextLabel="‚Üí"
          previousLabel="‚Üê"
        />
      )}

      {/* üé¨ –°—ñ—Ç–∫–∞ —Ñ—ñ–ª—å–º—ñ–≤ */}
      {isSuccess && (
        <MovieGrid
          movies={data.results}
          onSelect={(movie) => setSelectedMovie(movie)}
        />
      )}

      {/* ü™ü –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ */}
      {selectedMovie && (
        <MovieModal
          movie={selectedMovie}
          onClose={() => setSelectedMovie(null)}
        />
      )}
    </div>
  );
};

export default App;
