import React, { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { searchMovies } from "../../services/movieService";
import type { MovieResponse } from "../../types/movie";
import SearchBar from "../SearchBar/SearchBar";
import ErrorMessage from "../ErrorMessage/ErrorMessage";
import ReactPaginate from "react-paginate";
import MovieCard from "../MovieModal/MovieCard"; // ‚úÖ —ñ–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞–ø—Ä—è–º—É
import css from "./App.module.css";

const App: React.FC = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [page, setPage] = useState(1);

  const { data, isLoading, isError } = useQuery<MovieResponse>({
    queryKey: ["movies", searchTerm, page],
    queryFn: () => searchMovies(searchTerm, page),
    enabled: !!searchTerm,
    placeholderData: (previousData) => previousData,
  });

  return (
    <div>
      {/* üîù –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å */}
      <div className={css.topBar}>
        <p>Powered by TMDB</p>
        <SearchBar
          onSearch={(term) => {
            setSearchTerm(term);
            setPage(1);
          }}
        />
      </div>

      {/* üßº –ü–æ—Ä–æ–∂–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ—à—É–∫–æ–º */}
      {!searchTerm && (
        <div className={css.blank}>
          <p>Start by searching for a movie.</p>
        </div>
      )}

      {/* ‚ö†Ô∏è –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ */}
      {isError && <ErrorMessage message="Something went wrong." />}

      {/* ‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è */}
      {isLoading && <p>Loading...</p>}

      {/* ‚ùå –ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ */}
      {data?.results.length === 0 && (
        <ErrorMessage message="No movies found for your request." />
      )}

      {/* üî¢ –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è –∑–≤–µ—Ä—Ö—É */}
      {data && data.total_pages > 1 && (
        <ReactPaginate
          pageCount={data.total_pages}
          pageRangeDisplayed={5}
          marginPagesDisplayed={1}
          onPageChange={({ selected }) => setPage(selected + 1)}
          forcePage={page - 1}
          containerClassName={css.pagination}
          activeClassName={css.active}
          nextLabel="‚Üí"
          previousLabel="‚Üê"
        />
      )}

      {/* üé¨ –°—ñ—Ç–∫–∞ —Ñ—ñ–ª—å–º—ñ–≤ */}
      {data && (
        <div className={css.grid}>
          {data.results.map((movie) => (
            <MovieCard key={movie.id} movie={movie} />
          ))}
        </div>
      )}
    </div>
  );
};

export default App;
